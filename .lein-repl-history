(def x [:p])
x
(conj x "fish")
(split "i" "fish")
(clojure.string/split "i" "fish")
(clojure.string/split #"i" "fish")
(clojure.string/split "fish" #"i")
(clojure.string/split "fiish" #"i")
(clojure.string/split "fish" #"i")
(def y (clojure.string/split "fish" #"i"))
y
(map #([%1 :br]) y)
(map #(conj [:br] %1) y)
(map #(conj [:p] %1) y)
(map #(vec :p %1) y)
(map #(conj [:p] %1) y)
(map #(conj [%1] :br) y)
(apply concat (map #(conj [%1] :br) y)
)
(def txt [:p])
txt
(conj txt (apply concat (map #(conj [%1] :br) y))
)
(apply conj txt (apply concat (map #(conj [%1] :br) y)))
(apply conj txt (apply concat (map #(conj [%1] :br) (clojure.string/split "fish" #"i"))))
(apply conj txt (apply concat (map #(conj [%1] [:br]) (clojure.string/split "fish" #"i"))))
(remove [1 2 3] 1)
(remove [1 2 3])
(remove 2 [1 2 3])
x
(def x [1 2 3])
(reverse (rest (reverse [1 2 3 4])))
(def x "[:a :b :c]")
s
x
(read-string x)
x
(first (read-string x))
(def x "{:a \"abc\" :b \"bcd\" :c \"cde\"}")
(read-string x)
(first (read-string x))
(:abc (read-string x))
(:a (read-string x))
(get :a (read-string x))
(get (read-string x) :a)
(slurp "issues.txt")
(read-string (slurp "issues.txt"))
(slurp "issues.txt")
(split #"\n" (slurp "issues.txt"))
(clojure.string/split #"\n" (slurp "issues.txt"))
(clojure.string/split (slurp "issues.txt") #"\n")
(map read-string (clojure.string/split (slurp "issues.txt") #"\n"))
vec
(vec 1 2)
(vec 1)
(vector 1 2)
(map #(vector :p %1) (map read-string (clojure.string/split (slurp "issues.txt") #"\n")))
(vector (map #(vector :p %1) (map read-string (clojure.string/split (slurp "issues.txt") #"\n"))))
(conj [] (map #(vector :p %1) (map read-string (clojure.string/split (slurp "issues.txt") #"\n"))))
(into vector (map #(vector :p %1) (map read-string (clojure.string/split (slurp "issues.txt") #"\n"))))
(into [] (map #(vector :p %1) (map read-string (clojure.string/split (slurp "issues.txt") #"\n"))))
(into [:div ] (map #(vector :p %1) (map read-string (clojure.string/split (slurp "issues.txt") #"\n"))))
(into [:div] (map #(vector :p %1) (map read-string (clojure.string/split (slurp "issues.txt") #"\n"))))
(list "a" "b")
(vector "a" "b")
(hash "a" "b")
(map "a" "b")
{ "a" "b"}
(def l (list 1 2 3))
(def v [1 2 3])
v
l
(conj v 4)
(conj l 4)
